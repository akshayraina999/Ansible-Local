---
- name: Check if screen is installed or not
  package_facts: 
    manager: "auto"

- name: Installing screen
  apt:
    name: screen
    state: present
  when: "'screen' not in ansible_facts.packages"

- name: Installing developer and compile tools
  apt:
    name: {{ item }}
    state: present
  with_items:
  - build-essential
  - cmake
  - unzip
  - pkg-config

- name: Installing libraries for image formats
  apt:
    name: {{ item }}
    state: present
  with_items:
  - libjpeg-dev
  - libpng-dev
  - libtiff-dev
  - libavcodec-dev
  - libavformat-dev
  - libswscale-dev
  - libv4l-dev
  - libxvidcore-dev
  - libx264-dev

- name:  Installing libjasper-dev
  apt:
    name:  libjasper-dev
  register: result_libjasper

- name: Downloading libjasper-dev from deb
  apt-repository:
    repo: deb http://security.ubuntu.com/ubuntu xenial-security main
    state: present
  when: result_libjasper failed

- name: Installing libjasper1, libjasper-dev
  apt:
    name: {{ item }}
  with_items: 
  - libjasper1
  - libjasper-dev

- name: Install packages used for optimization in opencv
  apt:
    name: {{ item }}
  with_items: 
  - gfortran
  - libatlas-base-dev

- name: Install Python3 headers and developement file
  apt:
    name: python3-dev

- name: Check if opencv folder exists
  stat:
    path: {{ opencv_dir }}
  register: opencv_tmp

- name: Check if opencv-contrib folder exists
  stat:
    path: {{ opencv_contrib_dir }}
  register: opencv_contrib_tmp

- name: Download and uzip opencv
  unarchive: 
    src: https://github.com/opencv/opencv/archive/{{ opencv_version }}.zip
    dest: {{ opencv_dir }}
    copy: no

- name: Download and unzip opencv-contrib
  unarchive: 
    src: https://github.com/opencv/opencv_contrib/archive/{{ opencv_version }}.zip
    dest: {{ opencv_contrib_dir }}
    copy: no

- name: Create build directory
  file:
    # name: "{{ opencv_dir }}/opencv-{{ opencv_version }}/build"
    name: "{{ opencv_dir }}/build"
    state: directory

- name: Make the opencv build artifacts
  shell: | 
    source ~/.bashrc
    conda activate {{ environment_name }}
    cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -D INSTALL_C_EXAMPLES=ON -D INSTALL_PYTHON_EXAMPLES=ON -D OPENCV_GENERATE_PKGCONFIG=ON 
    -D OPENCV_EXTRA_MODULES_PATH=~/opencv_c/opencv_contrib/modules 
    -D BUILD_EXAMPLES=ON ..
  args:
    chdir: "{{ opencv_dir }}/build"
    executable: /bin/bash

- name: Compile opencv
  shell: |
    source ~/.bashrc
    conda activate {{ environment_name }}
    make -j8
  args: 
    chdir: "{{ opencv_dir }}/build"
    executable: /bin/bash

- name: Get full path of download directory ("~" varies by user)
  shell: pwd
  args:
    chdir: "{{ opencv_dir }}"
  register: pwd_result

- name: Install opencv
  become: true
  shell: |
    source ~/.bashrc
    conda activate {{ environment_name }}
    make install
    ldconfig
  args:
    chdir: "{{ pwd_result.stdout }}/build"
    executable: /bin/bash

- name: Remove temporary download directory, if it didn't prevously exist
  file: name={{ opencv_dir }} state=absent
  when: tmp.stat.exists == false

- name: Symlink opencv to virtualenv
  # file: path={{ virtualenv_home }}/{{ virtualenv_name }}/lib/python3.4/site-packages/cv2.so src=/usr/local/lib/python3.4/site-packages/cv2.cpython-34m.so state=link
  file:
    path: "{{ environment_name }}/lib/python3.4/site-packages/cv2.so"
    src: "/usr/local/lib/python3.4/site-packages/cv2.cpython-34m.so"
    state: link